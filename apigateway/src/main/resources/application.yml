server:
  port: 8080

spring:
  application:
    name: api-gateway

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}

  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
      httpclient:
        connect-timeout: 1000
        response-timeout: 5s
        pool:
          max-idle-time: 60s
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin, RETAIN_UNIQUE
      routes:
        - id: pix-service
          uri: lb://pix-service
          predicates:
            - Path=/pix/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: pixCircuitBreaker
                fallbackUri: forward:/fallback/pix
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
                backoff:
                  firstBackoff: 500ms
                  maxBackoff: 5s
                  factor: 2
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                key-resolver: "#{@ipKeyResolver}"

        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/auth/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: authCircuitBreaker
                fallbackUri: forward:/fallback/auth
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
                backoff:
                  firstBackoff: 500ms
                  maxBackoff: 5s
                  factor: 2
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                key-resolver: "#{@ipKeyResolver}"

        - id: rate_limiter_route
          uri: lb://auth-service
          predicates:
            - Path=/auth/admin/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@ipKeyResolver}"

  cors:
    allowed-origins: "https://pagamento.com.br, https://app.pagamento.com.br"
    allowed-methods: "GET,POST,OPTIONS"
    allowed-headers: "Authorization,Content-Type,X-Requested-With"
    exposed-headers: "X-Custom-Header,X-Rate-Limit"

resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50
        minimum-number-of-calls: 10
        sliding-window-type: TIME_BASED
        sliding-window-size: 10
        wait-duration-in-open-state: 10s
    instances:
      pixCircuitBreaker:
        baseConfig: default
      authCircuitBreaker:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

eureka:
  client:
    enabled: false

bytebuddy:
  dynamic: false

cache:
  type: caffeine
  
logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.http.server.reactive: WARN
    reactor.netty: WARN
    com.pagamento.gateway: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus, gateway
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
  endpoint:
    health:
      show-details: always
