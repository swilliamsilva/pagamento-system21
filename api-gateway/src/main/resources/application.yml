server:
  port: 8080

spring:
  application:
    name: api-gateway
  
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s
        pool:
          max-idle-time: 60s
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin, RETAIN_UNIQUE
        - CircuitBreaker=defaultCircuitBreaker
      circuitbreaker:
        enabled: true
    
    # Configuração do service discovery
    discovery:
      client:
        simple:
          instances:
            pix-service:
              - uri: http://localhost:8081
            auth-service:
              - uri: http://localhost:8082

  # Configurações de resiliência unificadas
  resilience4j:
    circuitbreaker:
      configs:
        default:
          failure-rate-threshold: 50
          minimum-number-of-calls: 10
          sliding-window-type: TIME_BASED
          sliding-window-size: 10
          wait-duration-in-open-state: 10s
      instances:
        pixCircuitBreaker:
          baseConfig: default
        authCircuitBreaker:
          baseConfig: default
    
    retry:
      configs:
        default:
          max-attempts: 3
          wait-duration: 500ms
          backoff-multiplier: 1.5
      instances:
        pix-service:
          baseConfig: default
        auth-service:
          baseConfig: default
    
    timelimiter:
      configs:
        default:
          timeout-duration: 10s
      instances:
        pix-service:
          baseConfig: default
        auth-service:
          baseConfig: default

# Configurações de logging
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.http.server.reactive: INFO
    reactor.netty: INFO
    com.pagamento.gateway: DEBUG

# Configurações de métricas
management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  metrics:
    tags:
      application: ${spring.application.name}